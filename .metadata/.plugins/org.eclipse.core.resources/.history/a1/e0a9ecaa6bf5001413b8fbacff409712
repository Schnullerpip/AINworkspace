package aufgabe2;

public class TestGraph {
    public static void main(final String[] args) {
        Graph<Integer> g = new AdjacencyListUndirectedGraph<>();
        for (int i = 0; i < 6; ++i) {
            g.addVertex(i);
        }
        g.addEdge(0, 1);
        g.addEdge(0, 4);
        g.addEdge(1, 2);
        g.addEdge(1, 4);
        g.addEdge(2, 3);
        g.addEdge(2, 4);
        g.addEdge(3, 4);
        g.addEdge(4, 5);
        System.out.println(g.addEdge(5, 4));
        System.out.printf("Anzahl Edges: %d%n", g.getNumberOfEdges());
        System.out.printf("Anzahl Edges: %d%n", g.getEdgeList().size());
        System.out.println("------------------");
        for (Integer i : GraphTraversion.depthFirstSearch(g, 1)) {
            System.out.println(i);
        }
        System.out.println("-------------------");
        for (Integer i : GraphTraversion.breadthFirstSearch(g, 1)) {
            System.out.println(i);
        }
         
         
        DirectedGraph<Integer> top = new AdjacencyListDirectedGraph<>();
        for (int i = 1; i < 8; ++i) {
            top.addVertex(i);
        }
         
        top.addEdge(1, 3);
        top.addEdge(2, 3);
        top.addEdge(3, 4);
        top.addEdge(3, 5);
        top.addEdge(4, 6);
        top.addEdge(5, 6);
        top.addEdge(6, 7);
         
        System.out.println("-------------------");
        for (Integer i : GraphTraversion.topologicalSort(top)) {
            System.out.println(i);
        }
    }
}