package aufgabe2;

import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

public class GraphTraversion<V> {

	public static <V> List<V> breadthFirstSearch(Graph<V> g, V v) {
		Deque<V> stack = new LinkedList<>();
		List<V> besucht = new LinkedList<>();

		stack.push(v);

		while (!stack.isEmpty()) {
			V tmp = stack.pop();
			if (besucht.contains(tmp))
				continue;
			besucht.add(tmp);

			for (V w : g.getAdjacentVertexList(v)) {
				if (!stack.contains(w))
					stack.push(w);
			}
		}
		return besucht;
	}

	public static <V> List<V> depthFirstSearch(Graph<V> g, V v) {
		List<V> besucht = new LinkedList<>();
		depthVisit(v, g, besucht);
		return besucht;
	}

	public static <V> void depthVisit(V v, Graph<V> g, List<V> besucht) {
		for (V vertex : g.getAdjacentVertexList(v)) {
			if (!besucht.contains(vertex)) {
				besucht.add(vertex);
				depthVisit(vertex, g, besucht);
			}
		}
	}

	public static <V> List<V> topologicalSort(DirectedGraph<V> g) {
		/* TODO */
		return null;
	}
}
